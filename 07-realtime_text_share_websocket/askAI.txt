//app.js

// App.js
import React from 'react';
import './App.css';
import ContentReader from './ContentReader';

const App = () => {
  return (
    <div className="App bg-background min-h-screen">
      <ContentReader />
    </div>
  );
};

export default App;

//ContentReader.js
// ContentReader.js
import React, { useState, useEffect, useCallback, useRef } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from './components/ui/card';
import { Button } from './components/ui/button';
import { Textarea } from './components/ui/textarea';
import { Tabs, TabsContent, TabsList, TabsTrigger } from './components/ui/tabs';

const ContentReader = () => {
  const [inputText, setInputText] = useState('');
  const [displayContent, setDisplayContent] = useState({ type: 'text', data: '' });
  const [isConnected, setIsConnected] = useState(false);
  const [connectionError, setConnectionError] = useState('');
  const [showCopied, setShowCopied] = useState(false);
  const [activeTab, setActiveTab] = useState('text');
  const wsRef = useRef(null);
  const copyTimeoutRef = useRef(null);
  const fileInputRef = useRef(null);

  const getWebSocketUrl = useCallback(async () => {
    try {
      const hostname = window.location.hostname;
      const response = await fetch(`http://${hostname}:3001/api/server-info`);
      const data = await response.json();
      return `ws://${hostname}:${data.wsPort}`;
    } catch (error) {
      console.error('Failed to get WebSocket URL:', error);
      throw error;
    }
  }, []);

  const connectWebSocket = useCallback(async () => {
    try {
      const wsUrl = await getWebSocketUrl();
      const ws = new WebSocket(wsUrl);

      ws.onopen = () => {
        setIsConnected(true);
        setConnectionError('');
      };

      ws.onmessage = (event) => {
        try {
          const data = JSON.parse(event.data);
          if (data.type === 'sync') {
            setDisplayContent(data.content);
            setActiveTab(data.content.type);
          }
        } catch (error) {
          console.error('Error processing message:', error);
        }
      };

      ws.onclose = () => {
        setIsConnected(false);
        setConnectionError('Connection lost. Attempting to reconnect...');
        setTimeout(connectWebSocket, 2000);
      };

      ws.onerror = (error) => {
        setConnectionError('Failed to connect to server. Retrying...');
        ws.close();
      };

      wsRef.current = ws;
    } catch (error) {
      setConnectionError('Failed to connect to server. Retrying...');
      setTimeout(connectWebSocket, 2000);
    }
  }, [getWebSocketUrl]);

  useEffect(() => {
    connectWebSocket();
    return () => {
      if (wsRef.current) {
        wsRef.current.close();
      }
    };
  }, [connectWebSocket]);

  const handleLoadContent = () => {
    if (!wsRef.current) return;
    
    if (activeTab === 'text' && !inputText.trim()) return;
    
    wsRef.current.send(JSON.stringify({
      type: 'update',
      contentType: activeTab,
      content: activeTab === 'text' ? inputText : displayContent.data
    }));
    
    if (activeTab === 'text') {
      setInputText('');
    }
  };

  const handleImageUpload = async (event) => {
    const file = event.target.files?.[0];
    if (!file) return;

    try {
      const reader = new FileReader();
      reader.onload = (e) => {
        const base64Image = e.target?.result;
        if (base64Image && wsRef.current) {
          wsRef.current.send(JSON.stringify({
            type: 'update',
            contentType: 'image',
            content: base64Image
          }));
        }
      };
      reader.readAsDataURL(file);
    } catch (error) {
      console.error('Error uploading image:', error);
    }
  };

  const handleCopyToClipboard = async () => {
    if (displayContent.type !== 'text') return;
    
    try {
      await navigator.clipboard.writeText(displayContent.data);
      setShowCopied(true);
      
      if (copyTimeoutRef.current) {
        clearTimeout(copyTimeoutRef.current);
      }
      
      copyTimeoutRef.current = setTimeout(() => {
        setShowCopied(false);
      }, 2000);
      
    } catch (err) {
      console.error('Failed to copy text: ', err);
    }
  };

  useEffect(() => {
    return () => {
      if (copyTimeoutRef.current) {
        clearTimeout(copyTimeoutRef.current);
      }
    };
  }, []);

  return (
    <div className="h-screen flex flex-col gap-4 p-4">
      <div className="text-sm text-right">
        Status: {isConnected ? (
          <span className="text-green-600">Connected</span>
        ) : (
          <span className="text-red-600">{connectionError || 'Disconnected'}</span>
        )}
      </div>
      
      <Card className="flex-1">
        <CardHeader className="py-2">
          <CardTitle className="text-xs">Share Content</CardTitle>
        </CardHeader>
        <CardContent className="p-2">
          <Tabs value={activeTab} onValueChange={setActiveTab}>
            <TabsList className="w-full mb-2 h-8">
              <TabsTrigger value="text" className="flex-1 text-xs">Text</TabsTrigger>
              <TabsTrigger value="image" className="flex-1 text-xs">Image</TabsTrigger>
            </TabsList>
            
            <TabsContent value="text">
              <Textarea
                placeholder="Type your text here..."
                value={inputText}
                onChange={(e) => setInputText(e.target.value)}
                className="min-h-[150px] mb-2"
              />
              <Button 
                onClick={handleLoadContent}
                disabled={!inputText.trim() || !isConnected}
                className="w-full h-8 text-xs"
              >
                Share Text
              </Button>
            </TabsContent>
            
            <TabsContent value="image">
              <input
                type="file"
                accept="image/*"
                onChange={handleImageUpload}
                ref={fileInputRef}
                className="hidden"
              />
              <Button 
                onClick={() => fileInputRef.current?.click()}
                disabled={!isConnected}
                className="w-full h-8 text-xs"
              >
                Select Image
              </Button>
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>

      <Card className="flex-1">
        <CardHeader className="py-2">
          <CardTitle className="text-xs">Shared Content</CardTitle>
        </CardHeader>
        <CardContent className="p-2 flex flex-col gap-2">
          {displayContent.type === 'text' ? (
            <>
              <div className="whitespace-pre-wrap min-h-[150px] p-2 border rounded-md text-sm">
                {displayContent.data || 'No text shared yet'}
              </div>
              <div className="relative">
                <Button
                  onClick={handleCopyToClipboard}
                  disabled={!displayContent.data}
                  className="w-full"
                >
                  {showCopied ? 'Copied!' : 'Copy to Clipboard'}
                </Button>
                
                {showCopied && (
                  <div className="absolute bottom-full left-0 right-0 mb-2 p-2 bg-green-100 text-green-800 rounded-md shadow-md transition-opacity duration-200 text-center">
                    Text copied to clipboard!
                  </div>
                )}
              </div>
            </>
          ) : (
            <div className="min-h-[150px] flex items-center justify-center border rounded-md">
              {displayContent.data ? (
                <img 
                  src={displayContent.data} 
                  alt="Shared content" 
                  className="max-w-full max-h-[70vh] object-contain"
                />
              ) : (
                <div className="text-gray-500">No image shared yet</div>
              )}
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
};

export default ContentReader;

//server.js

const express = require('express');
const path = require('path');
const { WebSocketServer } = require('ws');
const http = require('http');

const app = express();
const server = http.createServer(app);
const wss = new WebSocketServer({ server });

const PORT = process.env.PORT || 3001;
const SERVER_NAME = process.env.SERVER_NAME || `Dev-Server-${PORT}`;

const clients = new Set();
let currentContent = {
  type: 'text',
  data: ''
};

wss.on('connection', (ws) => {
  clients.add(ws);
  console.log(`Client connected. Total clients: ${clients.size}`);
  
  // Send current content to newly connected client
  ws.send(JSON.stringify({ type: 'sync', content: currentContent }));

  ws.on('message', (message) => {
    try {
      const data = JSON.parse(message);
      if (data.type === 'update') {
        currentContent = {
          type: data.contentType,
          data: data.content
        };
        // Broadcast to all other clients
        clients.forEach((client) => {
          if (client !== ws && client.readyState === 1) {
            client.send(JSON.stringify({ 
              type: 'sync', 
              content: currentContent 
            }));
          }
        });
      }
    } catch (error) {
      console.error('Error processing message:', error);
    }
  });

  ws.on('close', () => {
    clients.delete(ws);
    console.log(`Client disconnected. Total clients: ${clients.size}`);
  });
});

app.use(express.static(path.join(__dirname, 'public')));
app.use('/src', express.static(path.join(__dirname, 'src')));

app.use((req, res, next) => {
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');
  next();
});

app.get('/api/server-info', (req, res) => {
  res.json({
    wsPort: PORT
  });
});

server.listen(PORT, '0.0.0.0', () => {
  console.log(`ðŸš€ ${SERVER_NAME} is running at http://localhost:${PORT}`);
  console.log(`WebSocket server is running on ws://localhost:${PORT}`);
});

